const gameState={playerDeck:[],computerDeck:[],drawPile:[],isPlayerTurn:!0,gameStarted:!1,isAnimating:!1,roundHistory:[],score:{player:0,computer:0,draws:0,roundsPlayed:0}},DECK_DATA={theme:"Awesome Animals",cards:[{name:"Lion",size:250,speed:80,lifespan:15,strength:95},{name:"Elephant",size:400,speed:40,lifespan:70,strength:100},{name:"Cheetah",size:150,speed:120,lifespan:12,strength:50},{name:"Giraffe",size:500,speed:60,lifespan:25,strength:40},{name:"Gorilla",size:180,speed:40,lifespan:40,strength:85},{name:"Kangaroo",size:200,speed:70,lifespan:22,strength:60},{name:"Rhinoceros",size:380,speed:50,lifespan:45,strength:90},{name:"Zebra",size:220,speed:65,lifespan:25,strength:45}]},playerCardElement=document.getElementById("player-card"),computerCardElement=document.getElementById("computer-card"),playerCardsCount=document.getElementById("player-cards"),computerCardsCount=document.getElementById("computer-cards"),gameMessage=document.getElementById("game-message"),startButton=document.getElementById("start-game"),restartButton=document.getElementById("restart-game"),rulesModal=document.getElementById("rules-modal"),showRulesButton=document.getElementById("show-rules"),closeRulesButton=document.getElementById("close-rules"),loadingState={isLoading:!1,setLoading:function(e){this.isLoading=e,document.body.classList.toggle("loading",e);document.querySelectorAll(".btn").forEach((t=>{t.disabled=e}))}};function errorHandler(e){return function(...t){try{return e.apply(this,t)}catch(e){return console.error("Game Error:",e),showGameMessage("An error occurred. Please try again.","error"),loadingState.setLoading(!1),null}}}function debounce(e,t){let a;return function(...n){clearTimeout(a),a=setTimeout((()=>e.apply(this,n)),t)}}function shuffleDeck(e){const t=[...e];for(let e=t.length-1;e>0;e--){const a=Math.floor(Math.random()*(e+1));[t[e],t[a]]=[t[a],t[e]]}return t}function dealCards(){const e=shuffleDeck(DECK_DATA.cards),t=Math.ceil(e.length/2);gameState.playerDeck=e.slice(0,t),gameState.computerDeck=e.slice(t),updateCardCounts()}function updateCardCounts(){const e=gameState.playerDeck.length,t=gameState.computerDeck.length;animateNumber(playerCardsCount,parseInt(playerCardsCount.textContent),e),animateNumber(computerCardsCount,parseInt(computerCardsCount.textContent),t)}function animateNumber(e,t,a){const n=(a-t)/20;let r=t;const s=()=>{r+=n,n>0&&r>=a||n<0&&r<=a?e.textContent=a:(e.textContent=Math.round(r),requestAnimationFrame(s))};s()}function displayCard(e,t,a=!0){if(!e)return void(t.innerHTML="");const n=a?`\n        <ul class="attribute-list">\n            ${Object.entries(e).filter((([e])=>"name"!==e)).map((([e,t])=>`\n                    <li>\n                        <button class="attribute-button" data-attribute="${e}">\n                            <span>${e.charAt(0).toUpperCase()+e.slice(1)}</span>\n                            <span>${t}</span>\n                        </button>\n                    </li>\n                `)).join("")}\n        </ul>\n    `:"";t.innerHTML=`\n        <div class="card-content slide-in">\n            <h3>${e.name}</h3>\n            ${n}\n        </div>\n    `,a&&gameState.isPlayerTurn&&t.querySelectorAll(".attribute-button").forEach((e=>{e.addEventListener("click",(()=>handleAttributeSelection(e.dataset.attribute)))}))}function handleAttributeSelection(e){if(!gameState.gameStarted||!gameState.isPlayerTurn||gameState.isAnimating)return;gameState.isAnimating=!0;const t=gameState.playerDeck[0],a=gameState.computerDeck[0];if(!t||!a)throw new Error("Invalid game state: Missing cards");const n=playerCardElement.querySelector(`[data-attribute="${e}"]`);if(!n)throw new Error("Invalid attribute selection");n.classList.add("selected"),computerCardElement.classList.remove("card-back"),displayCard(a,computerCardElement,!0);const r=t[e],s=a[e];if("number"!=typeof r||"number"!=typeof s)throw new Error("Invalid attribute values");setTimeout((()=>{const t=playerCardElement.querySelector(`[data-attribute="${e}"]`),a=computerCardElement.querySelector(`[data-attribute="${e}"]`);r>s?(t.classList.add("winner"),a.classList.add("loser"),showGameMessage("You win this round!","success"),handleRoundWin("player",e)):s>r?(t.classList.add("loser"),a.classList.add("winner"),showGameMessage("Computer wins this round!","error"),handleRoundWin("computer",e)):(t.classList.add("selected"),a.classList.add("selected"),showGameMessage("It's a draw!",""),handleDraw(e))}),500)}function showGameMessage(e,t=""){gameMessage.textContent=e,gameMessage.className="game-message slide-in",t&&gameMessage.classList.add(t)}function handleRoundWin(e,t){const a=gameState.playerDeck.shift(),n=gameState.computerDeck.shift();gameState.roundHistory.push({winner:e,attribute:t,playerCard:a,computerCard:n}),gameState.score.roundsPlayed++,"player"===e?(gameState.score.player++,gameState.playerDeck.push(a,n),gameState.isPlayerTurn=!0,computerCardElement.classList.add("transfer"),setTimeout((()=>{computerCardElement.classList.remove("transfer")}),1e3)):(gameState.score.computer++,gameState.computerDeck.push(a,n),gameState.isPlayerTurn=!1,playerCardElement.classList.add("transfer"),setTimeout((()=>{playerCardElement.classList.remove("transfer")}),1e3)),gameState.drawPile.length>0&&("player"===e?gameState.playerDeck.push(...gameState.drawPile):gameState.computerDeck.push(...gameState.drawPile),gameState.drawPile=[]);showGameMessage(`${"player"===e?"You win":"Computer wins"} this round! ${`Score - You: ${gameState.score.player} | Computer: ${gameState.score.computer} | Draws: ${gameState.score.draws}`}`,"player"===e?"success":"error"),setTimeout((()=>{updateCardCounts(),gameState.isAnimating=!1,startNextRound()}),1500)}function handleDraw(e){const t=gameState.playerDeck.shift(),a=gameState.computerDeck.shift();gameState.drawPile.push(t,a),gameState.score.roundsPlayed++,gameState.score.draws++,gameState.roundHistory.push({winner:"draw",attribute:e,playerCard:t,computerCard:a});showGameMessage(`It's a draw! ${`Score - You: ${gameState.score.player} | Computer: ${gameState.score.computer} | Draws: ${gameState.score.draws}`}`),setTimeout((()=>{updateCardCounts(),gameState.isAnimating=!1,startNextRound()}),1500)}function startNextRound(){checkGameOver()||(computerCardElement.classList.add("card-back"),gameState.isPlayerTurn?(displayCard(gameState.playerDeck[0],playerCardElement,!0),displayCard(null,computerCardElement,!1),showGameMessage("Select an attribute to compare!")):(displayCard(gameState.playerDeck[0],playerCardElement,!0),displayCard(null,computerCardElement,!1),setTimeout(computerPlay,1e3)))}function computerPlay(){if(!gameState.gameStarted||gameState.isPlayerTurn)return;const e=gameState.computerDeck[0],t=Object.entries(e).filter((([e])=>"name"!==e)).map((([e,t])=>({name:e,value:t})));let a=t.reduce(((e,t)=>t.value>e.value?t:e)).name;if(gameState.roundHistory.length>0){const n=gameState.roundHistory.slice(-3).filter((e=>"computer"===e.winner)).map((e=>e.attribute));if(n.length>0){const r=n.find((a=>e[a]>=.8*Math.max(...t.map((t=>e[t.name])))));r&&(a=r)}}handleAttributeSelection(a)}function checkGameOver(){if(0===gameState.playerDeck.length||0===gameState.computerDeck.length){const e=gameState.playerDeck.length>0;return showGameMessage(`Game Over!\n\n            ${e?"Congratulations! You win!":"Computer wins!"}\n\n            Final Score:\n\n            You: ${gameState.score.player} wins\n\n            Computer: ${gameState.score.computer} wins\n\n            Draws: ${gameState.score.draws}\n\n            Total Rounds: ${gameState.score.roundsPlayed}`.replace(/\n/g,"<br>"),e?"success":"error"),showGameOverScreen(e),startButton.style.display="none",restartButton.style.display="inline-block",gameState.gameStarted=!1,!0}return!1}function showGameOverScreen(e){const t=document.createElement("div");t.className="modal",t.style.display="flex",t.innerHTML=`\n        <div class="modal-content slide-in">\n            <h2><i class="fas ${e?"fa-trophy":"fa-robot"}"></i> Game Over</h2>\n            <div class="rules-content">\n                <h3>${e?"Congratulations! You Win!":"Computer Wins!"}</h3>\n                <div class="final-stats">\n                    <p>Final Statistics:</p>\n                    <ul>\n                        <li>Your Wins: ${gameState.score.player}</li>\n                        <li>Computer Wins: ${gameState.score.computer}</li>\n                        <li>Draws: ${gameState.score.draws}</li>\n                        <li>Total Rounds: ${gameState.score.roundsPlayed}</li>\n                    </ul>\n                </div>\n            </div>\n            <button class="btn" onclick="this.closest('.modal').remove(); startGame();">\n                <i class="fas fa-redo"></i> Play Again\n            </button>\n        </div>\n    `,document.body.appendChild(t)}const startGame=errorHandler((function(){loadingState.setLoading(!0);try{gameState.gameStarted=!0,gameState.isPlayerTurn=!0,gameState.drawPile=[],gameState.roundHistory=[],gameState.isAnimating=!1,gameState.score={player:0,computer:0,draws:0,roundsPlayed:0},gameMessage.className="game-message",gameMessage.textContent="",startButton.style.display="none",restartButton.style.display="none";const e=document.querySelector(".modal");e&&e.remove(),dealCards(),startNextRound()}finally{loadingState.setLoading(!1)}}));function showRules(){rulesModal.style.display="flex",rulesModal.classList.add("slide-in")}function hideRules(){rulesModal.classList.remove("slide-in"),rulesModal.style.display="none"}startButton.addEventListener("click",startGame),restartButton.addEventListener("click",startGame),showRulesButton.addEventListener("click",errorHandler(showRules)),closeRulesButton.addEventListener("click",errorHandler(hideRules)),rulesModal.addEventListener("click",(e=>{e.target===rulesModal&&hideRules()})),document.addEventListener("keydown",(e=>{"Escape"===e.key&&"flex"===rulesModal.style.display&&hideRules()})),errorHandler((()=>{showGameMessage("Click 'Start Game' to begin!")}))();const domElements={playerCard:document.getElementById("player-card"),computerCard:document.getElementById("computer-card"),playerCardsCount:document.getElementById("player-cards"),computerCardsCount:document.getElementById("computer-cards"),gameMessage:document.getElementById("game-message"),startButton:document.getElementById("start-game"),restartButton:document.getElementById("restart-game"),rulesModal:document.getElementById("rules-modal"),showRulesButton:document.getElementById("show-rules"),closeRulesButton:document.getElementById("close-rules")};function animateElement(e,t,a=300){return new Promise((n=>{e.classList.add(t);let r=null;requestAnimationFrame((function s(o){r||(r=o),o-r<a?requestAnimationFrame(s):(e.classList.remove(t),n())}))}))}const style=document.createElement("style");style.textContent="\n    .loading {\n        cursor: wait !important;\n    }\n    \n    .loading .game-board {\n        opacity: 0.7;\n        pointer-events: none;\n    }\n    \n    .loading .btn:not(:disabled) {\n        opacity: 0.7;\n        cursor: wait;\n    }\n    \n    @keyframes spin {\n        to { transform: rotate(360deg); }\n    }\n    \n    .loading::after {\n        content: '';\n        position: fixed;\n        top: 50%;\n        left: 50%;\n        width: 40px;\n        height: 40px;\n        margin: -20px 0 0 -20px;\n        border: 4px solid rgba(0,0,0,0.1);\n        border-top-color: var(--secondary-color);\n        border-radius: 50%;\n        animation: spin 0.8s linear infinite;\n        z-index: 9999;\n    }\n",document.head.appendChild(style),window.gameState=gameState,window.DECK_DATA=DECK_DATA,window.shuffleDeck=shuffleDeck,window.dealCards=dealCards,window.computerPlay=computerPlay,window.checkGameOver=checkGameOver;